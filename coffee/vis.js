// Generated by CoffeeScript 1.3.1
(function() {
  var FeltMap, plotData, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  FeltMap = function() {
    var click, data, drawMap, fmap, height, latValue, line, lineColor, lineSize, lines, linesG, locG, locations, lonValue, map, mapG, margin, node, nodeColor, path, projection, setupLines, setupLocations, update, width, zoom, zoomer;
    width = 1024;
    height = 600;
    margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 20
    };
    latValue = function(d) {
      return parseFloat(d.lat);
    };
    lonValue = function(d) {
      return parseFloat(d.lon);
    };
    data = [];
    locations = [];
    lines = [];
    projection = d3.geo.mercator().scale(width).translate([width / 2, height / 2]);
    path = d3.geo.path().projection(projection);
    mapG = null;
    locG = null;
    linesG = null;
    node = null;
    line = null;
    map = null;
    lineColor = "#555";
    nodeColor = "#555";
    lineSize = 1.3;
    zoom = d3.behavior.zoom().translate(projection.translate()).scale(projection.scale()).scaleExtent([height, 8 * height]).on("zoom", zoomer);
    fmap = function(selection) {
      return selection.each(function(rawData) {
        var gEnter, svg;
        data = rawData;
        svg = d3.select(this).selectAll("svg").data([data]);
        gEnter = svg.enter().append("svg");
        svg.attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
        mapG = svg.append("g").attr("id", "countries").call(zoom);
        mapG.append("rect").attr("class", "background").attr("width", width).attr("height", height).attr("pointer-events", "all");
        return d3.json("data/countries.geo.json", function(json) {
          return drawMap(json);
        });
      });
    };
    drawMap = function(json) {
      map = mapG.selectAll("path").data(json.features);
      map.enter().append("path").on("click", click);
      return map.attr("d", path);
    };
    setupLocations = function() {
      locations = [];
      data.forEach(function(loc) {
        return locations.push(projection([lonValue(loc), latValue(loc)]));
      });
      return locations;
    };
    setupLines = function() {
      lines = d3.geom.delaunay(locations);
      return lines;
    };
    update = function() {
      setupLocations();
      setupLines();
      line = linesG.selectAll("path.link").data(lines);
      line.enter().append("path").attr("class", "link").style("fill", "none").style("stroke", lineColor).style("stroke-width", lineSize);
      line.attr("d", function(d) {
        return "M" + d.join("L") + "Z";
      });
      line.exit().remove();
      node = locG.selectAll("circle.location").data(locations);
      node.enter().append("circle").attr("class", "location");
      return node.attr("cx", function(d) {
        return d[0];
      }).attr("cy", function(d) {
        return d[1];
      }).attr("r", 4);
    };
    click = function(d) {
      var centroid, translate;
      centroid = path.centroid(d);
      translate = projection.translate();
      projection.translate([translate[0] - centroid[0] + width / 2, translate[1] - centroid[1] + height / 2]);
      zoom.translate(projection.translate());
      map.transition().duration(1000).attr("d", path);
      return update();
    };
    zoomer = function() {
      console.log('zoom');
      projection.translate(d3.event.translate).scale(d3.event.scale);
      drawMap();
      return update();
    };
    fmap.height = function(_) {
      if (!arguments.length) {
        return height;
      }
      height = _;
      return chart;
    };
    fmap.width = function(_) {
      if (!arguments.length) {
        return width;
      }
      width = _;
      return chart;
    };
    fmap.margin = function(_) {
      if (!arguments.length) {
        return margin;
      }
      margin = _;
      return chart;
    };
    return fmap;
  };

  plotData = function(selector, data, plot) {
    return d3.select(selector).datum(data).call(plot);
  };

  $(function() {
    var map;
    map = FeltMap();
    return d3.csv("data/locations.csv", function(data) {
      return plotData("#vis", data, map);
    });
  });

}).call(this);
